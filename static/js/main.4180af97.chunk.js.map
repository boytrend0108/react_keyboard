{"version":3,"sources":["AppFC.tsx","App.tsx","index.tsx"],"names":["AppFC","useState","pressedKey","setPressedKey","useEffect","pressKey","event","key","document","addEventListener","removeEventListener","className","App","state","componentDidMount","setState","this","React","Component","ReactDOM","render","getElementById"],"mappings":"2NAEaA,EAAiB,WAC5B,MAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OAZAC,qBAAU,WACR,IAAMC,EAAW,SAACC,GAChBH,EAAcG,EAAMC,MAKtB,OAFAC,SAASC,iBAAiB,QAASJ,GAE5B,WACLG,SAASE,oBAAoB,QAASL,MAEvC,IAGD,qBAAKM,UAAU,MAAf,SACGT,EAEG,oBAAGS,UAAU,eAAb,gDAEQT,EAFR,QAMA,4DCpBGU,EAAb,4MACEC,MAAe,CACbX,WAAY,IAFhB,EAKEY,kBAAoB,WAClBN,SAASC,iBAAiB,QAAS,EAAKJ,WAN5C,EAaEA,SAAW,SAACC,GACV,EAAKS,SAAS,CAAEb,WAAYI,EAAMC,OAdtC,0DASE,WACEC,SAASE,oBAAoB,QAASM,KAAKX,YAV/C,oBAiBE,WACE,IAAQH,EAAec,KAAKH,MAApBX,WAER,OACE,sBAAKS,UAAU,MAAf,UACGT,EAEG,oBAAGS,UAAU,eAAb,gDAEQT,EAFR,QAMA,yDAGJ,cAAC,EAAD,WAjCR,GAAyBe,IAAMC,W,MCF/BC,IAASC,OACP,cAAC,EAAD,IACAZ,SAASa,eAAe,W","file":"static/js/main.4180af97.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\n\nexport const AppFC:React.FC = () => {\n  const [pressedKey, setPressedKey] = useState('');\n\n  useEffect(() => {\n    const pressKey = (event: KeyboardEvent) => {\n      setPressedKey(event.key);\n    };\n\n    document.addEventListener('keyup', pressKey);\n\n    return () => {\n      document.removeEventListener('keyup', pressKey);\n    };\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {pressedKey\n        ? (\n          <p className=\"App__message\">\n            The last pressed key is\n            {` [${pressedKey}]`}\n          </p>\n        )\n        : (\n          <p> Nothing was pressed yet</p>\n        )}\n    </div>\n  );\n};\n","import React from 'react';\nimport { AppFC } from './AppFC';\n\ntype State = {\n  pressedKey: string;\n};\n\nexport class App extends React.Component {\n  state: State = {\n    pressedKey: '',\n  };\n\n  componentDidMount = (): void => {\n    document.addEventListener('keyup', this.pressKey);\n  };\n\n  componentWillUnmount(): void {\n    document.removeEventListener('keyup', this.pressKey);\n  }\n\n  pressKey = (event: KeyboardEvent) => {\n    this.setState({ pressedKey: event.key });\n  };\n\n  render(): React.ReactNode {\n    const { pressedKey } = this.state;\n\n    return (\n      <div className=\"App\">\n        {pressedKey\n          ? (\n            <p className=\"App__message\">\n              The last pressed key is\n              {` [${pressedKey}]`}\n            </p>\n          )\n          : (\n            <p> Nothing was pressed yet</p>\n          )}\n\n        <AppFC />\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nimport './index.scss';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}